import { cmykToHex } from './cmykToHex';
import { cmykToHsl } from './cmykToHsl';
import { cmykToRgb } from './cmykToRgb';
import { decNumToHex } from './decNumToHex';
import { expandHexShorthand } from './expandHexShorthand';
import { getColorModel } from './getColorModel';
import { getRandomColor } from './getRandomColor';
import { hexNumToDec } from './hexNumToDec';
import { hexToCmyk } from './hexToCmyk';
import { hexToHsl } from './hexToHsl';
import { hexToHsv } from './hexToHsv';
import { hexToRgb } from './hexToRgb';
import { hslToCmyk } from './hslToCmyk';
import { hslToHex } from './hslToHex';
import { hslToHsv } from './hslToHsv';
import { hslToRgb } from './hslToRgb';
import { hsvToHex } from './hsvToHex';
import { hsvToHsl } from './hsvToHsl';
import { hsvToRgb } from './hsvToRgb';
import { isHexShorthand } from './isHexShorthand';
import { isValidColor } from './isValidColor';
import { mixColors } from './mixColors';
import { normalizeDecNum } from './normalizeDecNum';
import { parseCmyk } from './parseCmyk';
import { parseHex } from './parseHex';
import { parseHsl } from './parseHsl';
import { parseHsv } from './parseHsv';
import { parseRgb } from './parseRgb';
import { rgbToCmyk } from './rgbToCmyk';
import { rgbToHex } from './rgbToHex';
import { rgbToHsl } from './rgbToHsl';
import { rgbToHsv } from './rgbToHsv';
import { toCmyk } from './toCmyk';
import { toHex } from './toHex';
import { toHsl } from './toHsl';
import { toHsv } from './toHsv';
import { toRgb } from './toRgb';
import * as Colors from './types';
declare const _default: {
    Colors: typeof Colors;
    cmykToHex: typeof cmykToHex;
    cmykToHsl: typeof cmykToHsl;
    cmykToRgb: typeof cmykToRgb;
    decNumToHex: typeof decNumToHex;
    expandHexShorthand: typeof expandHexShorthand;
    getColorModel: typeof getColorModel;
    getRandomColor: typeof getRandomColor;
    hexNumToDec: typeof hexNumToDec;
    hexToCmyk: typeof hexToCmyk;
    hexToHsl: typeof hexToHsl;
    hexToHsv: typeof hexToHsv;
    hexToRgb: typeof hexToRgb;
    hslToCmyk: typeof hslToCmyk;
    hslToHex: typeof hslToHex;
    hslToHsv: typeof hslToHsv;
    hslToRgb: typeof hslToRgb;
    hsvToHex: typeof hsvToHex;
    hsvToHsl: typeof hsvToHsl;
    hsvToRgb: typeof hsvToRgb;
    isHexShorthand: typeof isHexShorthand;
    isValidColor: typeof isValidColor;
    mixColors: typeof mixColors;
    normalizeDecNum: typeof normalizeDecNum;
    parseCmyk: typeof parseCmyk;
    parseHex: typeof parseHex;
    parseHsl: typeof parseHsl;
    parseHsv: typeof parseHsv;
    parseRgb: typeof parseRgb;
    rgbToCmyk: typeof rgbToCmyk;
    rgbToHex: typeof rgbToHex;
    rgbToHsl: typeof rgbToHsl;
    rgbToHsv: typeof rgbToHsv;
    toCmyk: typeof toCmyk;
    toHex: typeof toHex;
    toHsl: typeof toHsl;
    toHsv: typeof toHsv;
    toRgb: typeof toRgb;
    version: string;
};
export default _default;
